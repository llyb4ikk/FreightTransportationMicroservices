@page "/transportation"
@inject ITransportationService transportationService;
@inject HttpClient http;
@inject NavigationManager navigationManager;
@using FreightTransport_Client.Data.Interfaces;
@using FreightTransport_Client.Data.Models
@using Microsoft.AspNetCore.Http.Extensions

<div class="row justify-content-between">
    <div class="col col-3">
        <h3>Transportations</h3>
    </div>
    <div class="col-sm-auto">
        <button type="button" class="btn btn-primary" @onclick="NavigateToAdd">Add transportation</button>
    </div>
</div>


@if (transportationTableModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover ">
        <thead>
            <tr>
                <th scope="col">Start date</th>
                <th scope="col">Arrive date</th>
                <th scope="col">Start location</th>
                <th scope="col">Destination location</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transportation in transportationTableModels)
            {
                <tr>
                    <td value="@transportation.Id">@transportation.StartDate.ToShortDateString()</td>
                    <td value="@transportation.Id">@transportation.ArrivalDate.ToShortDateString()</td>
                    <td value="@transportation.Id">@transportation.StartCity, @transportation.StartRegion obl</td>
                    <td value="@transportation.Id">@transportation.DestinationCity, @transportation.DestinationRegion obl</td>
                    <button class="btn btn-warning" @onclick="() => NavigateToEditing(transportation.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteRoute(transportation.Id)">Delete</button>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<TransportationTableModel> transportationTableModels;

    protected override async Task OnInitializedAsync()
    {
        transportationTableModels = await transportationService.GetAllTransportationsTable();
    }

    private void NavigateToAdd() => navigationManager.NavigateTo("/transportation/addtransportation");
    private void NavigateToEditing(int id) => navigationManager.NavigateTo($"/transportation/transportationdetails/{id}");
    private void NavigateToInformation(int id) => navigationManager.NavigateTo($"/transportation/transportationdetails/{id}");
    private async void DeleteRoute(int id)
    {
        var result = await transportationService.DeleteTransportation(id);
        if (result)
        {
            transportationTableModels = await transportationService.GetAllTransportationsTable();
            StateHasChanged();
        }
    }

}